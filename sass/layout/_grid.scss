
.row {
    max-width: $grid-width; // if enough space, then 1140px; if viewport is smaller, then will adapt to fill 100% of the available space
    margin: 0 auto; // trick for centering block element inside another block element

    &:not(:last-child) { // selects all but the last child using the :not pseudoclass
        margin-bottom: $gutter-vertical;

        @include respond(tab-port) {
            margin-bottom: $gutter-vertical-small;
        }
    }

    @include respond(tab-port) {
        max-width: 50rem;
        padding: 0 2rem;
    }

    @include clearfix;

    [class^="col-"] { // class starts with "col-"; *= indicates "contains" rather than "starts with", and $= indicates "ends with"
        // background-color: orangered;
        float: left; // since using a float layout, need to float columns to the left

        &:not(:last-child) {
            margin-right: $gutter-horizontal;

            @include respond(tab-port) {
                margin-right: 0;
                margin-bottom: $gutter-vertical-small;
            }
        }

        @include respond(tab-port) {
            width: 100% !important; //make sure that all other widths are overwritten
        }
    }

    .col-1-of-2 {
        width: calc((100% - #{$gutter-horizontal}) / 2); //half of (total width - middle gutter)
    }

    .col-1-of-3 {
        width: calc((100% - (2 * #{$gutter-horizontal})) / 3);
    }

    .col-1-of-4 {
        width: calc((100% - (3 * #{$gutter-horizontal})) / 4);
    }

    .col-2-of-3 {
        width: calc(2 * ((100% - (2 * #{$gutter-horizontal})) / 3) + #{$gutter-horizontal});
    }
    
    .col-2-of-4 {
        width: calc(2 * ((100% - (3 * #{$gutter-horizontal})) / 4) + #{$gutter-horizontal});
    }

    .col-3-of-4 {
        width: calc(3 * ((100% - (3 * #{$gutter-horizontal})) / 4) + (2 * #{$gutter-horizontal}));
    }
}
